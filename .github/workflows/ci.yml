name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', 3.11, 3.13]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-benchmark
        if [ -f mtfema_backtester/requirements.txt ]; then pip install -r mtfema_backtester/requirements.txt; fi
        # Install additional testing dependencies
        pip install black mypy types-PyYAML matplotlib pandas numpy
        
    - name: Install numba (optional)
      run: |
        pip install numba || echo "Numba installation failed, using fallbacks"
        
    - name: Run unit tests
      run: |
        pytest tests/unit -v --cov=mtfema_backtester
        
    - name: Run integration tests
      run: |
        pytest tests/integration -v --cov=mtfema_backtester --cov-append
    
    - name: Generate coverage report
      run: |
        pytest --cov=mtfema_backtester --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: false

  performance:
    runs-on: ubuntu-latest
    # Run performance tests only on main branches to avoid long CI times
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-benchmark matplotlib pandas numpy
        if [ -f mtfema_backtester/requirements.txt ]; then pip install -r mtfema_backtester/requirements.txt; fi
        # Install numba for performance tests
        pip install numba
    
    - name: Run performance tests
      env:
        CI: true
      run: |
        # Run performance tests but skip slow ones on CI
        pytest tests/performance -m "performance and not slow" -v
        
    - name: Archive performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: results/performance

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy
        
    - name: Check code formatting with black
      run: |
        black --check --diff mtfema_backtester
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports mtfema_backtester

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*

  docs:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material
        
    - name: Build documentation
      run: |
        mkdir -p docs
        # Copy README.md to docs index
        cp README.md docs/index.md
        # Create basic mkdocs config if it doesn't exist
        if [ ! -f mkdocs.yml ]; then
          echo "site_name: Multi-Timeframe 9 EMA Extension Strategy" > mkdocs.yml
          echo "theme: material" >> mkdocs.yml
        fi
        mkdocs build
        
    - name: Deploy documentation
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: site
        branch: gh-pages
